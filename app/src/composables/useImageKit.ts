import ImageKit from 'imagekit-javascript';
import { api } from 'src/boot/axios';
import { Ref, ref } from 'vue';

type ImageKitAuthResponse = {
  token: string;
  signature: string;
  expire: number;
};

type Folder =
  | '/Posts'
  | '/Comments'
  | '/Users_Profile/Profile_Photos/Original'
  | '/Users_Profile/Profile_Photos/Cropped'
  | '/Users_Profile/Cover_Photos/Original'
  | '/Users_Profile/Cover_Photos/Cropped';

export const useImageKit = () => {
  const imageKit = new ImageKit({
    urlEndpoint: import.meta.env.VITE_IK_ENDPOINT as string,
    publicKey: import.meta.env.VITE_IK_PUBLIC_KEY,
  });

  const progress: Ref<Record<string, number>> = ref({});

  const auth = async () => {
    return api.get<ImageKitAuthResponse>('/imagekit/auth').then((response) => {
      return response.data;
    });
  };

  const upload = async (
    file: File,
    fileName: string | null = null,
    folder: Folder
  ) => {
    const { token, signature, expire } = await auth();
    const autoGeneratedFileName = `${Date.now()}-${file.name}}`;
    const name = fileName ? fileName : autoGeneratedFileName;
    const customXHR = new XMLHttpRequest();

    progress.value[name] = 0;

    const trackProgress = (file: File) => {
      const fileSize = file.size;

      const updateProgress = (e: ProgressEvent) => {
        if (e.loaded <= fileSize) {
          const percent = Math.round((e.loaded / fileSize) * 100);
          progress.value[name] = percent;
        }

        if (e.loaded == e.total) {
          delete progress.value[name];
        }
      };

      customXHR.upload.addEventListener('progress', updateProgress);
    };

    trackProgress(file);

    return imageKit
      .upload({
        xhr: customXHR,
        file,
        fileName: name,
        token,
        signature,
        expire,
        folder,
        useUniqueFileName: false,
      })
      .then((response) => {
        return response;
      });
  };

  const uploadMultiple = (files: FileList, folder: Folder) => {
    const fileArray = Array.from(files);
    return Promise.all(
      fileArray.map((file) => {
        const fileName = `${Date.now()}-${file.name}}`;
        return upload(file, fileName, folder);
      })
    );
  };

  return { upload, uploadMultiple, progress };
};
